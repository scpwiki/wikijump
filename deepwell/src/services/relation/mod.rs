/*
 * services/relation/mod.rs
 *
 * DEEPWELL - Wikijump API provider and database manager
 * Copyright (C) 2019-2024 Wikijump Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

//! A service to manage "relations", which are relationships between entities.
//!
//! A "relation" is a pair of two IDs and the relation type, along with optional
//! associated JSON metadata.
//!
//! Instead of needing to create a separate table for user blocks or site membership,
//! we can instead define a number of relations using the relation system.
//!
//! For example:
//! * `site` / `member` / `user` &mdash; User is a site member
//! * `user` / `block` / `user` &mdash; User has blocked another user

#[allow(unused_imports)]
mod prelude {
    pub use super::super::prelude::*;
    pub use super::*;
    pub use crate::models::relation::Model as RelationModel;
    pub use crate::models::sea_orm_active_enums::RelationObjectType;
    pub use paste::paste;
}

#[macro_use]
mod macros;

mod page_star;
mod page_watch;
mod site_ban;
mod site_member;
mod site_user;
mod structs;
mod user_block;
mod user_contact;
mod user_follow;

pub use self::page_star::*;
pub use self::page_watch::*;
pub use self::site_ban::*;
pub use self::site_member::*;
pub use self::site_user::*;
pub use self::structs::*;
pub use self::user_block::*;
pub use self::user_contact::*;
pub use self::user_follow::*;

use super::prelude::*;
use crate::models::relation::{self, Entity as Relation, Model as RelationModel};
use serde::Serialize;

// Base service exists here.
//
// Methods and types per-relation are in their respective submodules,
// and are mostly generated by macros.

#[derive(Debug)]
pub struct RelationService;

impl RelationService {
    pub async fn create<M: Serialize>(
        ctx: &ServiceContext<'_>,
        relation_type: RelationType,
        dest: RelationObject,
        from: RelationObject,
        created_by: i64,
        metadata: &M,
    ) -> Result<RelationModel> {
        debug!("Create relation for {dest:?} ← {relation_type:?} ← {from:?}",);

        // Get previous relation, if present
        let txn = ctx.seaorm_transaction();
        if let Some(relation) = Self::get_optional(
            ctx,
            RelationReference::Relationship {
                relation_type,
                dest,
                from,
            },
        )
        .await?
        {
            debug!("Relation already exists, marking old item overwritten");
            let model = relation::ActiveModel {
                relation_id: Set(relation.relation_id),
                overwritten_at: Set(Some(now())),
                overwritten_by: Set(Some(created_by)),
                ..Default::default()
            };

            model.update(txn).await?;
        }

        // Insert new relation
        let (dest_type, dest_id) = dest.into();
        let (from_type, from_id) = from.into();
        relation_type.types().check(dest_type, from_type);

        let metadata = serde_json::to_value(metadata)?;
        let model = relation::ActiveModel {
            relation_type: Set(str!(relation_type.value())),
            dest_type: Set(dest_type),
            dest_id: Set(dest_id),
            from_type: Set(from_type),
            from_id: Set(from_id),
            metadata: Set(metadata),
            created_by: Set(created_by),
            ..Default::default()
        };

        let relation = model.insert(txn).await?;
        Ok(relation)
    }

    pub async fn remove(
        ctx: &ServiceContext<'_>,
        reference: RelationReference,
        deleted_by: i64,
    ) -> Result<RelationModel> {
        debug!("Removing relation for {reference:?}");

        let txn = ctx.seaorm_transaction();
        let relation_id = Self::get_id(ctx, reference).await?;
        let model = relation::ActiveModel {
            relation_id: Set(relation_id),
            deleted_at: Set(Some(now())),
            deleted_by: Set(Some(deleted_by)),
            ..Default::default()
        };

        let output = model.update(txn).await?;
        Ok(output)
    }

    pub async fn get_optional(
        ctx: &ServiceContext<'_>,
        reference: RelationReference,
    ) -> Result<Option<RelationModel>> {
        debug!("Getting relation for {reference:?}");

        let txn = ctx.seaorm_transaction();
        let relation = Relation::find()
            .filter(
                Condition::all()
                    .add(reference.condition())
                    .add(relation::Column::OverwrittenAt.is_null())
                    .add(relation::Column::DeletedAt.is_null()),
            )
            .one(txn)
            .await?;

        Ok(relation)
    }

    /// Gets the relation ID from a reference, looking up if necessary.
    pub async fn get_id(
        ctx: &ServiceContext<'_>,
        reference: RelationReference,
    ) -> Result<i64> {
        match reference {
            RelationReference::Id(relation_id) => Ok(relation_id),
            RelationReference::Relationship { .. } => {
                let RelationModel { relation_id, .. } = Self::get(ctx, reference).await?;

                Ok(relation_id)
            }
        }
    }

    pub async fn get(
        ctx: &ServiceContext<'_>,
        reference: RelationReference,
    ) -> Result<RelationModel> {
        find_or_error!(Self::get_optional(ctx, reference), Relation)
    }

    pub async fn exists(
        ctx: &ServiceContext<'_>,
        reference: RelationReference,
    ) -> Result<bool> {
        Self::get_optional(ctx, reference)
            .await
            .map(|relation| relation.is_some())
    }

    // TODO paginate
    /// Gets the history of this `dest` / `from` relation.
    ///
    /// This includes all all edits of the relation (`overwritten_at`)
    /// and deleted / remade versions of the relation (`deleted_at`).
    pub async fn get_history(
        ctx: &ServiceContext<'_>,
        relation_type: RelationType,
        dest: RelationObject,
        from: RelationObject,
    ) -> Result<Vec<RelationModel>> {
        info!("Getting history of relations for {dest:?} / {relation_type:?} / {from:?}");

        let txn = ctx.seaorm_transaction();
        let relations = Relation::find()
            .filter(relation_condition(relation_type, dest, from))
            .order_by_asc(relation::Column::CreatedAt)
            .all(txn)
            .await?;

        Ok(relations)
    }

    // TODO paginate
    /// Gets all relations from the starting object in the given direction.
    ///
    /// For instance, this can be used to get all blocked users, or all users who are blocking
    /// someone depending on the `RelationDirection`.
    pub async fn get_entries(
        ctx: &ServiceContext<'_>,
        relation_type: RelationType,
        object: RelationObject,
        direction: RelationDirection,
    ) -> Result<Vec<RelationModel>> {
        info!("Getting {direction:?} relations for {object:?} / {relation_type:?}",);

        let (object_type, object_id) = object.into();
        let (object_type_column, object_id_column) = match direction {
            RelationDirection::Dest => {
                (relation::Column::DestType, relation::Column::DestId)
            }
            RelationDirection::From => {
                (relation::Column::FromType, relation::Column::FromId)
            }
        };

        let txn = ctx.seaorm_transaction();
        let relations = Relation::find()
            .filter(
                Condition::all()
                    .add(relation::Column::RelationType.eq(relation_type.value()))
                    .add(object_type_column.eq(object_type))
                    .add(object_id_column.eq(object_id)),
            )
            .order_by_asc(relation::Column::CreatedAt)
            .all(txn)
            .await?;

        Ok(relations)
    }
}
